/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-16 05:13:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp02_005fdbcp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class jsp01_005flistmember_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/ezen/Desktop/04%20jsp/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jsp02_database/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1670915061496L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("	커넥션풀 ( Connection Poll )\r\n");
      out.write("	\r\n");
      out.write("	커넥션풀기법이란?\r\n");
      out.write("		데이터베이스와 커넥션을 사전에 만들어서 poll에 저장해 두고\r\n");
      out.write("		필요할 때마다 풀에서 꺼내서 사용한 후 다시 pool에 반환하는 기법.\r\n");
      out.write("\r\n");
      out.write("	커넥션풀의 특징은\r\n");
      out.write("		1. 사전에 풀에 Connection이 생성되어 있기 때문에 커넥션을 생성하는데 필요한 시간들을 감소시킨다.\r\n");
      out.write("		2. Connection을 재사용하기 때문에 생성되는 Connection의 갯수를 일정하게 관리할 수 있다.\r\n");
      out.write("		3. Connection Pool을 사용하게 되면 웹애플리케이션의 성능과 처리성능이 향상되기 때문에\r\n");
      out.write("			웹애플리케이션 대부분이 커넥션풀을 기본적으로 사용하고 있다.\r\n");
      out.write("\r\n");
      out.write("	커넥션풀 사용방법\r\n");
      out.write("		1. DBCP관련 jar파일과 JDBC관련 jar파일을 설치\r\n");
      out.write("			a. Commons DBCP API(commons-dbcp2-????.jar, commons-pool2-????.jar, commons-logging-??.jar)\r\n");
      out.write("			b. WEB-INF/lib에 복사 후 add to build path\r\n");
      out.write("		2. Connection Pool을 초기화 하기\r\n");
      out.write("			a. DB initial 클래스작성(DBCPInit.java)\r\n");
      out.write("			b. web.xml에 Connection Pool관련 태그 설정하기\r\n");
      out.write("		3. Connection Pool에서 Connection을 사용하기\r\n");
      out.write("			a. jdbc:apache:commons:dbcp:커넥션이름  <- web.xml에 myPoolName\r\n");
      out.write("-->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1\">	\r\n");
      out.write("  	<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("  	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("  	<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>	\r\n");
      out.write("	<div class=\"container\" align=\"center\">\r\n");
      out.write("	\r\n");
      out.write("		<h3>회원등록</h3>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("			\r\n");
      out.write("			<table class=\"table table-boarded table-dark table-hover\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>아이디</th>\r\n");
      out.write("					<th>비밀번호</th>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<th>이메일</th>\r\n");
      out.write("					<th>삭제</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("				\r\n");
      out.write("				");

					Connection conn = null;
					Statement stmt = null;
					ResultSet rs = null;
					String drv = "jdbc:apache:commons:dbcp:myPoolName";
					String sql = "select * from member";
				
					try {
						conn = DriverManager.getConnection(drv);
						stmt = conn.createStatement();
						rs = stmt.executeQuery(sql);
						
						while(rs.next()) {
							String id = rs.getString(1);
							String pw = rs.getString(2);
							String name = rs.getString(3);
							String email = rs.getString(4);
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><a href=\"/jsp02_database/jsp01_connect/jsp02_updateForm.jsp?id=");
      out.print(id);
      out.write('"');
      out.write('>');
      out.print( id );
      out.write("</a></td>\r\n");
      out.write("					<td>");
      out.print( pw );
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print( name );
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print( email );
      out.write("</td>\r\n");
      out.write("					<td><a href=\"/jsp02_database/jsp01_connect/jsp04_deleteForm.jsp?id=");
      out.print(id);
      out.write("\" class=\"btn btn-danger\">삭제</a></td>\r\n");
      out.write("				</tr>				\r\n");
      out.write("				");

						}
					} catch(Exception e) {
						out.println("<h3 class='bg-danger text-white'>DB접속실패!!!</h3>" + e.getMessage());
					} finally {
						try {
							if(rs != null) rs.close();
							if(stmt != null) stmt.close();
							if(conn != null) conn.close();							
						} catch(Exception e) {
							// dummy
						}
					}
				
      out.write("\r\n");
      out.write("			</table>\r\n");
      out.write("			<a href=\"/jsp02_database/jsp01_connect/jsp03_insertForm.jsp?\" class=\"btn btn-primary mt-sm-2\">회원등록</a>\r\n");
      out.write("		</div>\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
