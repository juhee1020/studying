package com.lec.dbcp;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnection;
import org.apache.commons.dbcp2.PoolableConnectionFactory;



public class DBCPinit extends HttpServlet{
	@Override
	public void init() throws ServletException {
		//super.init();
		loadJDBCDriver(); // 어떤 디비 쓸래? (오라클, 마리아디비...?)
		initConnectionPool();
	}

	private void loadJDBCDriver() {
		/* Class.forName() 대신에 web.xml에다가 Driver Class를 설정해서 
		웹서버가 시작할 때 자동으로 등록되도록	*/
		//driver, url, user, password 설정
		//getInitParameter(getServletName());
		String driverClass=getInitParameter("jdbcDriver");
		try {
			Class.forName(driverClass);
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("JDBC드라이버 로딩실패\nweb.xml 초기화 파라미터 jdbcDriver를 확인해보시오.");
			//e.printStackTrace();
		}
	}
	
	private void initConnectionPool() {
		String url=getInitParameter("url");
		String usr=getInitParameter("user");
		String pwd=getInitParameter("pass");
		
	// 1. Connection factory 생성 (Connection 공장!)

		// a. 커넥션풀이 새로운 커넥션을 생성할 때 사용할 커넥션팩토리를 생성.
		ConnectionFactory cf=new DriverManagerConnectionFactory(url, usr, pwd);

		// b. PoolableConnection을 생성
			// 팩토리생성 DBCP는 커넥션풀에 커넥션을 보관할 때 PoolableConnection을 사용한다.
			// 이 클래스는 내부적으로 커넥션을 보관하고 있으며 커넥션을 관리하는데 필요한 기능을 제공한다.
			// 예를들어 connection을 close하면 connection을 메모리에서 삭제하는 것이 아니라
			// Connection Pool에 Connection을 반환한다.
		PoolableConnectionFactory pcf=new PoolableConnectionFactory(cf, null);

		// c. Connection이 유효한지 검사하기 위한 SQL을 지정
		pcf.setValidationQuery("select 1"); // 마리아디비, mysql
		// pcf.setValidationQuery("select 1 from dual");// 오라클



	// 2. Connection Pool 설정
		// a. 설정정보를 관리할 객체를 생성
		// b. 커넥션의 검사주기
		// c. 풀에 보관된 커넥션의 유효여부를 검사할지 안할지
		// d. 사용할 connection의 최소객수를 설정
		// e. 사용할 connection의 최대객수를 설정
	// 3. Connection Pool 설정정보를 이용해서 Connection Pool을 생성
	// 4. Connection Pool에 제공할 JDBC드라이버를 등록
	}
}