package com.lec.ex01_class;
/*
	중첩클래스

	중첩클래스는 클래스 내부에 선언되느 ㄴ위치에 따라서 3가지로 분류된다.

	1) 클래스맴버로 선언되는 중첩클래스는 "객체(인스턴스)멤버클래스"라고 하고
	2) static으로 선언된느 중첩클래스는 "정적멤버클래스"라고 하면
	3) 메서드 내부에 선언되는 중첩클래스를 "로컬멤버클래스"라고 한다.

	객체멤버클래스는 클래스나 객체가 사용중(생성)이라면 언제든지 사용할 수 있지만
	로컬멤버는 메서드가 호출(실행)될 때만 사용할 수 있고 호출된 메서드가 종료되면 메모리에서 삭제된다.

	중첩클래스들도 하나의 클래스이기 때문에 컴파일을 하면 바이트코드파일(~.class)이 각각 생성된다.
	다만 바이트코드파일의 이름은 "A$B.class"형태 or 로컬멤버클래스일 경우 "A$1B.class"(번호는 메서드일련변호)
	의 형태로 생성된다.

	중첩클래스 중에 객체(인스턴스)멤버클래스(B)는 static없이 선언된 클래스를 말한다.
	객체멤버클래스는 객체(인스턴스)필드와 객체(인스턴스)메서드만 선언이 가능하고
	static필드와 static메서드는 선언할 수 없다.
	
	중첩클래스 중에 정적멤버클래스(C)는 static 키워드로 선언되 중첩클래스를 말한다.
	정적맴버클래스는 모든 종류의 필드와 메서드를 선언할 수 있다.
	
	중첩클래스 중에 로컬맴버클래스(D)는 메서드 내부에 선언된 중첩클래스로서
	로컬중첩클래스는 접근제한자(public, private)를 선언할 수 없다.
	그 이유는 로컬맴버클래스는 메서드 내에서만 사용되기 때문에 접근을 제한할 필요(의미)가 없다.
	로컬중첩클래스에는 인스턴스필드와 인스턴스메서드만 선언이 가능하고 static으로 선언할 수 없다.

*/
public class NestedMain {
	public static void main(String[] args) {
		A a=new A();
		System.out.println();
		
		// 1. 객체맴버중첩클래스(B)
		//B b=new B(); // 중첩멤버클래스는 직접 접근 불가.
		// B는 A의 객체멤버 즉, A객체 생성 후에 접근할 수 있다.
		A.B b= a.new B();
		b.b_field=100;
		b.b_method1();
		System.out.println();



		// 2. 정적멤버중첩클래스(C)
		// A.C.c_field1=10; // c_field1는 객체멤버이기 때문에 C객체 생성 후에 사용가능.
		A.C.c_field2=100; // static이라 가능함
		// A.C.c_method1(); // c_method1()는 객체멤버이기 대문에 C객체생성 후 사용가능.
		A.C.c_method2(); // 가능.
		
		A.C c=new A.C(); // 객체 생성
		c.c_field1=1;
		c.c_method1(); // 호출 가능.



		// 3. 로컬맴버중첩클래스
		// 로컬멤버중첩클래스는 메서드를 호출한 후에 메서드 내부에서만 사용가능하다.
		A a_=new A();
		a_.a_method();
	}
}
